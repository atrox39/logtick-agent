package config

import (
	"fmt"
	"os"
	"strings"

	"github.com/google/uuid"
	"gopkg.in/yaml.v3"
)

type Config struct {
	AgentName       string `yaml:"agent_name"`
	AgentID         string `yaml:"agent_id"`
	IntervalSeconds int    `yaml:"interval_seconds"`
	TargetUrl       string `yaml:"target_url"`
}

func SaveConfig(cfg *Config, filePath string) error {
	if cfg.AgentID == "" {
		cfg.AgentID = uuid.New().String()
	}
	data, err := yaml.Marshal(cfg)
	if err != nil {
		return fmt.Errorf("failed to marshal config: %w", err)
	}
	err = os.WriteFile(filePath, data, 0644)
	if err != nil {
		return fmt.Errorf("failed to write config file: %w", err)
	}
	fmt.Println("Config file saved successfully")
	// read and modify second line and add comment
	data, err = os.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("failed to read config file: %w", err)
	}
	lines := strings.Split(string(data), "\n")
	lines[1] = lines[1] + " # Agent ID generated by the agent do not modify or remove this line"
	data = []byte(strings.Join(lines, "\n"))
	err = os.WriteFile(filePath, data, 0644)
	if err != nil {
		return fmt.Errorf("failed to write config file: %w", err)
	}
	return nil
}

func LoadConfig(filePath string) (*Config, error) {
	agentID := uuid.New().String()
	data, err := os.ReadFile(filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to read config file: %w", err)
	}
	cfg := &Config{}
	err = yaml.Unmarshal(data, cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to parse config file: %w", err)
	}
	if cfg.AgentName == "" {
		return nil, fmt.Errorf("agent name is required")
	}
	if cfg.AgentID == "" {
		cfg.AgentID = agentID
		fmt.Printf("Agent ID generated: %s\n", cfg.AgentID)
	}
	if cfg.IntervalSeconds <= 0 {
		return nil, fmt.Errorf("invalid interval seconds: %d", cfg.IntervalSeconds)
	}
	if cfg.TargetUrl == "" {
		return nil, fmt.Errorf("target url is required")
	}
	err = SaveConfig(cfg, filePath)
	if err != nil {
		return nil, fmt.Errorf("failed to override config file: %w", err)
	}
	return cfg, nil
}
